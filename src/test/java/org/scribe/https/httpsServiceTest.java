package org.scribe.https;



import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.scribe.builder.ServiceBuilder;
import org.scribe.builder.api.ApiFlow;
import org.scribe.model.Request;
import org.scribe.model.RequestTuner;
import org.scribe.model.Token;
import org.scribe.oauth.OAuth20ServiceImpl;
import org.scribe.test.helpers.ExceptionsChecker;


public class httpsServiceTest {
	
	static Server srv=null;
	@BeforeClass
	public static void StartServer (){		
		srv = new Server();
		srv.start();		
	}
	
	@AfterClass
	public static void StopServer(){
		if (srv!=null)
			srv.interrupt();		
	}
	
	@Test 
	public void testhomeApiSSlException()
	{
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(testhomeApi.class)
									    .apiKey("1")
									    .apiSecret("1")
									    .build20();
	    
		try{
			service.makeAccessTokenRequest(null);
			fail();
		}catch (org.scribe.exceptions.OAuthConnectionException e){
			assertTrue(ExceptionsChecker.containString(e, "SSLHandshakeException"));			
		}
	}
	
	@Test
	public void shouldGetAccessToken_CC(){
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(testhomeApi.class)
									    .apiKey("CC")
									    .apiSecret("CC")
									    .build20();
				 
		SSLRequestTuner tuner = new SSLRequestTuner();
		((testhomeApi)service.api).changeFlow(ApiFlow.client_cred);
		try{
			service.makeAccessTokenRequest(tuner);
		}catch (org.scribe.exceptions.OAuthConnectionException e){
			fail();			
		}
		
		assertEquals(service.api.getAccessToken().getToken(),"b8f5bc82bc398ce0dfb4adc297e5b712f862a16f");
	}
	
	@Test
	public void shouldGetAccessToken_UC(){
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(testhomeApi.class)
									    .apiKey("UC")
									    .apiSecret("UC")
									    .build20();
				 
		SSLRequestTuner tuner = new SSLRequestTuner();
		((testhomeApi)service.api).changeFlow(ApiFlow.user_cred);
		try{
			service.makeAccessTokenRequest("user","password",tuner);
		}catch (org.scribe.exceptions.OAuthConnectionException e){
			fail();			
		}
		
		assertEquals(service.api.getAccessToken().getToken(),"b8f5bc82bc398ce0dfb4adc297e5b712f862a16f");
	}
	
	@Test
	public void shouldGetAccessToken_S(){
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(testhomeApi.class)
									    .apiKey("S")
									    .apiSecret("S")
									    .build20();
				 
		SSLRequestTuner tuner = new SSLRequestTuner();
		((testhomeApi)service.api).changeFlow(ApiFlow.standard);
		try{
			service.makeAccessTokenRequest("auth_code",tuner);
		}catch (org.scribe.exceptions.OAuthConnectionException e){
			fail();			
		}
		
		assertEquals(service.api.getAccessToken().getToken(),"b8f5bc82bc398ce0dfb4adc297e5b712f862a16f");
	}
	
	
	@Test
	public void shouldGetAccessToken_R(){
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(testhomeApi.class)
									    .apiKey("2")
									    .apiSecret("2")
									    .build20();
				 
		SSLRequestTuner tuner = new SSLRequestTuner();		
		try{
			service.makeAccessTokenRequest(new Token("refresh","token"),tuner);
		}catch (org.scribe.exceptions.OAuthConnectionException e){
			fail();			
		}
		
		assertEquals(service.api.getAccessToken().getToken(),"b8f5bc82bc398ce0dfb4adc297e5b712f862a16f");
	}
	
	
	@Test
	public void localhostApiSSlException(){
		OAuth20ServiceImpl service = new ServiceBuilder()
									    .provider(localhostApi.class)
									    .apiKey("1")
									    .apiSecret("1")
									    .build20();
				 
		SSLRequestTuner tuner = new SSLRequestTuner();
		try{
			service.makeAccessTokenRequest(tuner);
			fail();
		}catch (org.scribe.exceptions.OAuthConnectionException e){			
			assertTrue(ExceptionsChecker.containString(e, "SSLHandshakeException"));			
		}
	}
}


class SSLRequestTuner extends RequestTuner{

	@Override
	public void tuneBeforeConection(Request request) {
		//nothing
	}

	@Override
	public void tuneBeforeSend(Request request) {
		//must tune connection
		//https://developer.android.com/training/articles/security-ssl.html
				
		try {
			
			Certificate ca;
			KeyStore keyStore;
			CertificateFactory cf = CertificateFactory.getInstance("X.509");
			ca = cf.generateCertificate(new ByteArrayInputStream(CAFileContents));
			keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
			keyStore.load(null, null);
			keyStore.setCertificateEntry("ca",ca);	
			String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
			TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
			tmf.init(keyStore);

			// Create an SSLContext that uses our TrustManager
			SSLContext context = SSLContext.getInstance("TLS");
			context.init(null, tmf.getTrustManagers(), null);			
			((HttpsURLConnection) this.getConnection(request)).setSSLSocketFactory(context.getSocketFactory());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			fail();		
		}
				
	}

	@Override
	public void tuneBeforeResponse(Request request) {
		//nothing
	}

	//content ca.cer file
	private static byte CAFileContents[] = {
		(byte)0x30,(byte)0x82,(byte)0x03,(byte)0xA5,(byte)0x30,(byte)0x82,(byte)0x03,(byte)0x0E,(byte)0xA0,(byte)0x03,(byte)0x02,(byte)0x01,(byte)0x02,(byte)0x02,(byte)0x09,(byte)0x00,(byte)
		(byte)0xC2,(byte)0x1C,(byte)0x5D,(byte)0xBA,(byte)0x3D,(byte)0xB2,(byte)0x70,(byte)0xF8,(byte)0x30,(byte)0x0D,(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)
		(byte)0xF7,(byte)0x0D,(byte)0x01,(byte)0x01,(byte)0x05,(byte)0x05,(byte)0x00,(byte)0x30,(byte)0x81,(byte)0x94,(byte)0x31,(byte)0x0B,(byte)0x30,(byte)0x09,(byte)0x06,(byte)0x03,(byte)
		(byte)0x55,(byte)0x04,(byte)0x06,(byte)0x13,(byte)0x02,(byte)0x52,(byte)0x55,(byte)0x31,(byte)0x11,(byte)0x30,(byte)0x0F,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x08,(byte)
		(byte)0x14,(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x73,(byte)0x74,(byte)0x61,(byte)0x74,(byte)0x65,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)
		(byte)0x55,(byte)0x04,(byte)0x07,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x63,(byte)0x69,(byte)0x74,(byte)0x79,(byte)0x31,(byte)0x0F,(byte)0x30,(byte)0x0D,(byte)
		(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0A,(byte)0x14,(byte)0x06,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x31,(byte)0x24,(byte)0x30,(byte)
		(byte)0x22,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0B,(byte)0x14,(byte)0x1B,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x2D,(byte)0x75,(byte)
		(byte)0x6E,(byte)0x69,(byte)0x74,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x5F,(byte)0x1B,(byte)
		(byte)0x5B,(byte)0x34,(byte)0x7E,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x03,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)
		(byte)0x5F,(byte)0x6E,(byte)0x61,(byte)0x6D,(byte)0x65,(byte)0x31,(byte)0x17,(byte)0x30,(byte)0x15,(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)0xF7,(byte)
		(byte)0x0D,(byte)0x01,(byte)0x09,(byte)0x01,(byte)0x16,(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x65,(byte)0x6D,(byte)0x61,(byte)0x69,(byte)0x6C,(byte)0x30,(byte)0x1E,(byte)
		(byte)0x17,(byte)0x0D,(byte)0x31,(byte)0x34,(byte)0x30,(byte)0x36,(byte)0x31,(byte)0x39,(byte)0x31,(byte)0x36,(byte)0x33,(byte)0x36,(byte)0x35,(byte)0x38,(byte)0x5A,(byte)0x17,(byte)
		(byte)0x0D,(byte)0x31,(byte)0x35,(byte)0x30,(byte)0x36,(byte)0x31,(byte)0x39,(byte)0x31,(byte)0x36,(byte)0x33,(byte)0x36,(byte)0x35,(byte)0x38,(byte)0x5A,(byte)0x30,(byte)0x81,(byte)
		(byte)0x94,(byte)0x31,(byte)0x0B,(byte)0x30,(byte)0x09,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x06,(byte)0x13,(byte)0x02,(byte)0x52,(byte)0x55,(byte)0x31,(byte)0x11,(byte)
		(byte)0x30,(byte)0x0F,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x08,(byte)0x14,(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x73,(byte)0x74,(byte)0x61,(byte)0x74,(byte)
		(byte)0x65,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x07,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x63,(byte)
		(byte)0x69,(byte)0x74,(byte)0x79,(byte)0x31,(byte)0x0F,(byte)0x30,(byte)0x0D,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0A,(byte)0x14,(byte)0x06,(byte)0x63,(byte)0x61,(byte)
		(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x31,(byte)0x24,(byte)0x30,(byte)0x22,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0B,(byte)0x14,(byte)0x1B,(byte)0x63,(byte)
		(byte)0x61,(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x2D,(byte)0x75,(byte)0x6E,(byte)0x69,(byte)0x74,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)
		(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x5F,(byte)0x1B,(byte)0x5B,(byte)0x34,(byte)0x7E,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)
		(byte)0x55,(byte)0x04,(byte)0x03,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x6E,(byte)0x61,(byte)0x6D,(byte)0x65,(byte)0x31,(byte)0x17,(byte)0x30,(byte)0x15,(byte)
		(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)0xF7,(byte)0x0D,(byte)0x01,(byte)0x09,(byte)0x01,(byte)0x16,(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)
		(byte)0x65,(byte)0x6D,(byte)0x61,(byte)0x69,(byte)0x6C,(byte)0x30,(byte)0x81,(byte)0x9F,(byte)0x30,(byte)0x0D,(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)
		(byte)0xF7,(byte)0x0D,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x05,(byte)0x00,(byte)0x03,(byte)0x81,(byte)0x8D,(byte)0x00,(byte)0x30,(byte)0x81,(byte)0x89,(byte)0x02,(byte)0x81,(byte)
		(byte)0x81,(byte)0x00,(byte)0xCB,(byte)0x60,(byte)0xAA,(byte)0xF1,(byte)0x63,(byte)0x1A,(byte)0xD9,(byte)0xB6,(byte)0xF7,(byte)0xA4,(byte)0x34,(byte)0xF1,(byte)0x2D,(byte)0xE1,(byte)
		(byte)0xA9,(byte)0x84,(byte)0x1B,(byte)0x9C,(byte)0x36,(byte)0x6B,(byte)0x4C,(byte)0x5D,(byte)0x78,(byte)0xAB,(byte)0xEC,(byte)0x9C,(byte)0x33,(byte)0x9C,(byte)0xC6,(byte)0x58,(byte)
		(byte)0x98,(byte)0x84,(byte)0xFE,(byte)0x84,(byte)0x0D,(byte)0xF1,(byte)0x7E,(byte)0x27,(byte)0xBB,(byte)0x96,(byte)0x2B,(byte)0x91,(byte)0xDA,(byte)0x28,(byte)0x96,(byte)0x28,(byte)
		(byte)0x71,(byte)0xF9,(byte)0x44,(byte)0x3D,(byte)0xBF,(byte)0x6E,(byte)0xAF,(byte)0x53,(byte)0x7B,(byte)0x17,(byte)0x94,(byte)0xAE,(byte)0x51,(byte)0xC5,(byte)0x30,(byte)0x97,(byte)
		(byte)0x61,(byte)0x54,(byte)0xBF,(byte)0xEF,(byte)0xF2,(byte)0xED,(byte)0x8B,(byte)0x80,(byte)0xEF,(byte)0x62,(byte)0xDE,(byte)0xD8,(byte)0xAB,(byte)0x09,(byte)0xAF,(byte)0xCE,(byte)
		(byte)0x0A,(byte)0x7C,(byte)0x20,(byte)0x61,(byte)0xA8,(byte)0x40,(byte)0x96,(byte)0xA3,(byte)0x74,(byte)0x42,(byte)0xED,(byte)0xEF,(byte)0x0E,(byte)0x74,(byte)0x30,(byte)0x71,(byte)
		(byte)0x9E,(byte)0x2F,(byte)0x40,(byte)0x22,(byte)0xB2,(byte)0xB4,(byte)0x05,(byte)0x2B,(byte)0xA2,(byte)0x7F,(byte)0xA4,(byte)0xAF,(byte)0xB6,(byte)0x6E,(byte)0xAC,(byte)0x5E,(byte)
		(byte)0x1D,(byte)0xE2,(byte)0x3B,(byte)0x10,(byte)0x9F,(byte)0x6F,(byte)0x96,(byte)0xB9,(byte)0x8B,(byte)0x95,(byte)0xBE,(byte)0xE3,(byte)0x7D,(byte)0xB2,(byte)0x78,(byte)0xDB,(byte)
		(byte)0xE0,(byte)0x19,(byte)0x02,(byte)0x03,(byte)0x01,(byte)0x00,(byte)0x01,(byte)0xA3,(byte)0x81,(byte)0xFC,(byte)0x30,(byte)0x81,(byte)0xF9,(byte)0x30,(byte)0x1D,(byte)0x06,(byte)
		(byte)0x03,(byte)0x55,(byte)0x1D,(byte)0x0E,(byte)0x04,(byte)0x16,(byte)0x04,(byte)0x14,(byte)0x43,(byte)0xDE,(byte)0x2F,(byte)0x59,(byte)0x6D,(byte)0x99,(byte)0x5E,(byte)0x11,(byte)
		(byte)0xBE,(byte)0xE8,(byte)0xF4,(byte)0x64,(byte)0xCD,(byte)0xF2,(byte)0x24,(byte)0x0F,(byte)0x94,(byte)0xFA,(byte)0xC2,(byte)0x38,(byte)0x30,(byte)0x81,(byte)0xC9,(byte)0x06,(byte)
		(byte)0x03,(byte)0x55,(byte)0x1D,(byte)0x23,(byte)0x04,(byte)0x81,(byte)0xC1,(byte)0x30,(byte)0x81,(byte)0xBE,(byte)0x80,(byte)0x14,(byte)0x43,(byte)0xDE,(byte)0x2F,(byte)0x59,(byte)
		(byte)0x6D,(byte)0x99,(byte)0x5E,(byte)0x11,(byte)0xBE,(byte)0xE8,(byte)0xF4,(byte)0x64,(byte)0xCD,(byte)0xF2,(byte)0x24,(byte)0x0F,(byte)0x94,(byte)0xFA,(byte)0xC2,(byte)0x38,(byte)
		(byte)0xA1,(byte)0x81,(byte)0x9A,(byte)0xA4,(byte)0x81,(byte)0x97,(byte)0x30,(byte)0x81,(byte)0x94,(byte)0x31,(byte)0x0B,(byte)0x30,(byte)0x09,(byte)0x06,(byte)0x03,(byte)0x55,(byte)
		(byte)0x04,(byte)0x06,(byte)0x13,(byte)0x02,(byte)0x52,(byte)0x55,(byte)0x31,(byte)0x11,(byte)0x30,(byte)0x0F,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x08,(byte)0x14,(byte)
		(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x73,(byte)0x74,(byte)0x61,(byte)0x74,(byte)0x65,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)0x55,(byte)
		(byte)0x04,(byte)0x07,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x63,(byte)0x69,(byte)0x74,(byte)0x79,(byte)0x31,(byte)0x0F,(byte)0x30,(byte)0x0D,(byte)0x06,(byte)
		(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0A,(byte)0x14,(byte)0x06,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x31,(byte)0x24,(byte)0x30,(byte)0x22,(byte)
		(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x0B,(byte)0x14,(byte)0x1B,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x6F,(byte)0x72,(byte)0x67,(byte)0x2D,(byte)0x75,(byte)0x6E,(byte)
		(byte)0x69,(byte)0x74,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x44,(byte)0x1B,(byte)0x5B,(byte)0x5F,(byte)0x1B,(byte)0x5B,(byte)
		(byte)0x34,(byte)0x7E,(byte)0x31,(byte)0x10,(byte)0x30,(byte)0x0E,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x04,(byte)0x03,(byte)0x14,(byte)0x07,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)
		(byte)0x6E,(byte)0x61,(byte)0x6D,(byte)0x65,(byte)0x31,(byte)0x17,(byte)0x30,(byte)0x15,(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)0xF7,(byte)0x0D,(byte)
		(byte)0x01,(byte)0x09,(byte)0x01,(byte)0x16,(byte)0x08,(byte)0x63,(byte)0x61,(byte)0x5F,(byte)0x65,(byte)0x6D,(byte)0x61,(byte)0x69,(byte)0x6C,(byte)0x82,(byte)0x09,(byte)0x00,(byte)
		(byte)0xC2,(byte)0x1C,(byte)0x5D,(byte)0xBA,(byte)0x3D,(byte)0xB2,(byte)0x70,(byte)0xF8,(byte)0x30,(byte)0x0C,(byte)0x06,(byte)0x03,(byte)0x55,(byte)0x1D,(byte)0x13,(byte)0x04,(byte)
		(byte)0x05,(byte)0x30,(byte)0x03,(byte)0x01,(byte)0x01,(byte)0xFF,(byte)0x30,(byte)0x0D,(byte)0x06,(byte)0x09,(byte)0x2A,(byte)0x86,(byte)0x48,(byte)0x86,(byte)0xF7,(byte)0x0D,(byte)
		(byte)0x01,(byte)0x01,(byte)0x05,(byte)0x05,(byte)0x00,(byte)0x03,(byte)0x81,(byte)0x81,(byte)0x00,(byte)0x17,(byte)0x91,(byte)0x38,(byte)0xB9,(byte)0x1A,(byte)0x23,(byte)0x6C,(byte)
		(byte)0x79,(byte)0xB9,(byte)0x09,(byte)0x7E,(byte)0x8B,(byte)0x69,(byte)0x9E,(byte)0xB7,(byte)0xCA,(byte)0xB0,(byte)0xA1,(byte)0x72,(byte)0xFA,(byte)0xC0,(byte)0xA7,(byte)0x11,(byte)
		(byte)0xCF,(byte)0xAD,(byte)0x28,(byte)0x73,(byte)0x98,(byte)0xCC,(byte)0x41,(byte)0xA9,(byte)0x48,(byte)0x21,(byte)0x36,(byte)0x54,(byte)0x23,(byte)0xBE,(byte)0x8D,(byte)0xBC,(byte)
		(byte)0xE6,(byte)0xEA,(byte)0x69,(byte)0x5C,(byte)0x3F,(byte)0xFC,(byte)0x74,(byte)0xAE,(byte)0x8D,(byte)0xB2,(byte)0x57,(byte)0x36,(byte)0x8C,(byte)0x50,(byte)0x07,(byte)0x21,(byte)
		(byte)0xFA,(byte)0xDE,(byte)0x18,(byte)0x68,(byte)0xD3,(byte)0xFB,(byte)0xB3,(byte)0x69,(byte)0xD6,(byte)0x6A,(byte)0xFB,(byte)0xF2,(byte)0xFA,(byte)0x12,(byte)0x68,(byte)0x98,(byte)
		(byte)0xFA,(byte)0xC6,(byte)0x18,(byte)0xB3,(byte)0x25,(byte)0x0C,(byte)0xD8,(byte)0xF0,(byte)0x03,(byte)0x6A,(byte)0x56,(byte)0x31,(byte)0x5D,(byte)0x9C,(byte)0x02,(byte)0x39,(byte)
		(byte)0xF2,(byte)0x3F,(byte)0x75,(byte)0x54,(byte)0x4A,(byte)0x49,(byte)0x81,(byte)0xA5,(byte)0x00,(byte)0x0D,(byte)0xCC,(byte)0x48,(byte)0xF7,(byte)0xB0,(byte)0x98,(byte)0x38,(byte)
		(byte)0x35,(byte)0xEC,(byte)0x0E,(byte)0x72,(byte)0x73,(byte)0x63,(byte)0x7E,(byte)0x6B,(byte)0x73,(byte)0x60,(byte)0x24,(byte)0x1D,(byte)0x37,(byte)0x48,(byte)0x08,(byte)0xBE,(byte)
		(byte)0x75,(byte)0x69,(byte)0xAD,(byte)0x0A,(byte)0xC0,(byte)0xD7,(byte)0xF8,(byte)0xB1,(byte)0x44};
}